// controllers/horoscopebot.js
import { GoogleGenerativeAI } from '@google/generative-ai';
import dotenv from 'dotenv';

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤ ENV (.env)
dotenv.config();

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á Gemini ‡∏î‡πâ‡∏ß‡∏¢ API Key
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

export const getHoroscope = async (req, res) => {
  try {
    const { prompt } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ prompt ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å frontend ‡πÑ‡∏´‡∏°
    if (!prompt) {
      throw new Error('Missing prompt in request body');
    }

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• Gemini
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-pro" });

    // ‡∏™‡πà‡∏á prompt ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Gemini
    const result = await model.generateContent(prompt);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å response
    const response = await result.response;
    const text = response.text();

    if (!text) {
      throw new Error('No response text from Gemini API');
    }

    // ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
    const sections = {
      love: extractSection(text, '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å'),
      career: extractSection(text, '‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô'),
      health: extractSection(text, '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û'),
      message: extractSection(text, '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏ß‡∏°')
    };

    return sections;

  } catch (error) {
    console.error("‚ùå Gemini API error:", error);
    throw error;
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏¢‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
const extractSection = (text, title) => {

  // ‡∏õ‡∏£‡∏±‡∏ö regex ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ç‡∏≠‡∏á Gemini
  const patterns = [
    // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ emoji ‡πÅ‡∏•‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà
    new RegExp(`${title}\\s*[üíñüíºüçéüíå]?\\s*\\n([\\s\\S]*?)(?=\\n\\*\\*|\\n$|$)`),
    // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏î‡∏≠‡∏Å‡∏à‡∏±‡∏ô
    new RegExp(`\\*\\*${title}\\*\\*\\s*[üíñüíºüçéüíå]?\\s*\\n([\\s\\S]*?)(?=\\n\\*\\*|\\n$|$)`),
    // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏ß‡∏¥‡∏†‡∏≤‡∏Ñ
    new RegExp(`${title}\\s*[:Ôºö]\\s*([\\s\\S]*?)(?=\\n\\*\\*|\\n$|$)`),
    // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    new RegExp(`${title}\\s*\\n([\\s\\S]*?)(?=\\n\\*\\*|\\n$|$)`)
  ];

  for (const pattern of patterns) {
    const match = text.match(pattern);
    if (match) {
      const content = match[1].trim();
      return content;
    }
  }

  console.log(`‚ùå No match found for ${title}`);
  return '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏à‡πâ‡∏≤';
};
